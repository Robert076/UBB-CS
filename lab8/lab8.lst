     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000                    n dd 0h
    15 00000004 00000000                    m dd 0h
    16 00000008 256400                      rf db "%d", 0
    17 0000000B 256400                      pf db "%d", 0
    18 0000000E 257300                      pfs db "%s", 0
    19 00000011 2000                        space db " ", 0
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 68[00000000]                    push dword n
    24 00000005 68[08000000]                    push dword rf
    25 0000000A FF15[00000000]                  call [scanf]
    26 00000010 83C408                          add ESP, 4 * 2 ; reading n from the console
    27                                          
    28 00000013 68[04000000]                    push dword m
    29 00000018 68[08000000]                    push dword rf
    30 0000001D FF15[00000000]                  call [scanf]
    31 00000023 83C408                          add ESP, 4 * 2 ; reading m from the console
    32                                       
    33 00000026 FF35[00000000]                  push dword [n]
    34 0000002C 6658                            pop AX
    35 0000002E 665B                            pop BX ; putting n in BX:AX
    36                                          
    37 00000030 FF35[04000000]                  push dword [m]
    38 00000036 6659                            pop CX
    39 00000038 665A                            pop DX ; putting m in DX:CX
    40                                          
    41 0000003A 6601C8                          add AX, CX
    42 0000003D 6629D3                          sub BX, DX ; computing the requested sum and difference
    43                                          
    44 00000040 666A00                          push word 0
    45 00000043 6650                            push AX
    46 00000045 68[0B000000]                    push dword pf
    47 0000004A FF15[00000000]                  call [printf]
    48 00000050 83C408                          add ESP, 4 * 2 ; printing the sum
    49                                          
    50 00000053 68[11000000]                    push dword space
    51 00000058 68[0E000000]                    push dword pfs
    52 0000005D FF15[00000000]                  call [printf]
    53 00000063 83C408                          add ESP, 4 * 2
    54                                          
    55 00000066 666A00                          push word 0
    56 00000069 6653                            push BX
    57 0000006B 68[0B000000]                    push dword pf
    58 00000070 FF15[00000000]                  call [printf]
    59 00000076 83C408                          add ESP, 4 * 2 ; printing the difference
    60                                          
    61 00000079 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 0000007B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
