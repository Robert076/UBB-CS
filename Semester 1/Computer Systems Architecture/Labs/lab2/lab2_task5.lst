     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  
    15                                  ; our code starts here
    16                                  segment code use32 class=code
    17                                      start:
    18                                          ; ...
    19 00000000 B40A                            mov AH, 10 ; a = 10
    20 00000002 B005                            mov AL, 5 ; b = 5
    21 00000004 B714                            mov BH, 20 ; c = 20
    22 00000006 00E0                            add AL, AH ; b = b + a
    23 00000008 00F8                            add AL, BH ; b = b + c
    24 0000000A B402                            mov AH, 2 ; to be able to do (a + b + c) * 2 because AH * AL -> AX
    25 0000000C F6E4                            mul AH
    26 0000000E B403                            mov AH, 3 ; to do the next multiplication
    27 00000010 F6E4                            mul AH
    28 00000012 66BB0500                        mov BX, 5 ; divisor ( g )   why do we need 3 registors to manage the stacks : the role of esp and ebp is to always define the currently executing stack. mov ebp, esp   it is the point where the new stack fra
    29 00000016 6689C2                          mov DX, AX
    30 00000019 66F7F3                          div word BX ; AX / BX -> AX
    31                                          
    32                                          ; exit(0)
    33 0000001C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    34 0000001E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
