     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  
    15                                  ; our code starts here
    16                                  segment code use32 class=code
    17                                      start:
    18                                          ; ...
    19 00000000 B30F                            mov BL, 15 ; variabila b
    20 00000002 B70A                            mov BH, 10 ; variabila c
    21 00000004 00FB                            add BL, BH ; b = b + c
    22 00000006 B732                            mov BH, 50 ; c = 50
    23 00000008 28DF                            sub BH, BL ; 50 - b - c
    24 0000000A B002                            mov AL, 2 ; AL = 2
    25 0000000C F6E7                            mul BH ; AL * BH -> AX
    26 0000000E 6689C3                          mov BX, AX ; moving BX into AX to be able to multiply a*a into AX
    27 00000011 B00A                            mov AL, 10 ; variable a is stored into AL (8bit)
    28 00000013 F6E0                            mul AL ; AL * AL -> AX now a 16 bit result ( this is a * a )
    29 00000015 6601C3                          add BX, AX ; adding a * a to the first part of the expression
    30 00000018 66B90A00                        mov CX, 10
    31 0000001C 6601CB                          add BX, CX
    32                                          ; exit(0)
    33 0000001F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    34 00000021 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
