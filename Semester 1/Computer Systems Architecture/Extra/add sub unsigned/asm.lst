     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 64                          a db 100
    15 00000001 0A00                        b dw 10
    16 00000003 6E000000                    c dd 110
    17 00000007 F401000000000000            d dq 500
    18                                      
    19                                      ; (a+c)-b+a + (d-c)
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 B800000000                      mov EAX, 0
    24                                      
    25 00000005 A0[00000000]                    mov AL, [a]
    26 0000000A B400                            mov AH, 0 ; AX = a
    27                                          
    28 0000000C 0305[03000000]                  add EAX, [c] ; AX = a + c
    29                                          
    30 00000012 BB00000000                      mov EBX, 0
    31 00000017 668B1D[01000000]                mov BX, [b] ; EBX = b
    32                                          
    33 0000001E 29D8                            sub EAX, EBX ; (a + c) - b = EAX
    34                                  
    35 00000020 BB00000000                      mov EBX, 0
    36 00000025 8A1D[00000000]                  mov BL, [a]
    37                                          
    38 0000002B 01D8                            add EAX, EBX ; (a + c) - b + a = EAX
    39                                          
    40 0000002D 8B1D[07000000]                  mov EBX, dword [d]
    41 00000033 8B15[0B000000]                  mov EDX, dword [d + 4]
    42                                          
    43 00000039 2B1D[03000000]                  sub EBX, dword [c] ; EDX:EBX = d - c
    44                                          
    45 0000003F 01C3                            add EBX, EAX
    46 00000041 83D200                          adc EDX, dword 0
    47                                          
    48 00000044 B900000000                      mov ECX, 0
    49                                          
    50                                          ; ECX:EAX = (a + c) - b + ad
    51                                          
    52                                          
    53                                          ; exit(0)
    54 00000049 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 0000004B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
